[tool.poetry]
name = "sliding-window"
version = "0.0.0"
description = "Sliding Window - Rate Limit Counter"
authors = ["Sergey Rybakov <serge.rybakov@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: MIT License",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: Unix",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[tool.poetry-dynamic-versioning]
vcs = "git"
style = "semver"
metadata = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
redis = ["redis"]
numpy = ["numpy"]

[tool.poetry.dependencies]
python = "^3.9"
typing-extensions = "^4.12.2"
redis = { version = "^5.2.1" , optional = true}
numpy = { version = ">=1.24 <3" , optional = true}

[tool.poetry.group.dev.dependencies]
python-dateutil = "^2.9.0.post0"
coverage = "^7.1.0"
ssort = "^0.14.0"
ruff = "^0.9.7"
mypy = "^1.0.0"
mypy-extensions = "^1.0.0"
pre-commit = "^3.0.4"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-sugar = "^0.9.6"
pytest-random-order = "^1.1.0"
deepdiff = "^6.3.0"
pytest-deadfixtures = "^2.2.1"
pytest-timeout = "^2.3.1"
bandit = "^1.7.5"
deptry = "^0.6.4"


[tool.poetry.group.docs.dependencies]
docutils = "^0.17"
m2r2 = "^0.3.2"
sphinx-rtd-theme = "^1.2.2"
enum_tools = "^0.10.0"
sphinx_toolbox = "^3.5.0"
doc8 = "^0.11.2"

#############
### TOOLS ###
#############

[tool.ruff]
target-version = "py39"
line-length = 120
extend-exclude = [".idea", ".vscode", ".fleet", "tests/"]
src = ["sliding_window"]

# https://docs.astral.sh/ruff/settings/#lint
[tool.ruff.lint]
select = [
    'F', # flake8
    'C90', # mccabe
    'I', # isort
    'UP', # pyupgrade
    'S', # flake8-bandit
    'ASYNC', # flake8-async
    'B', # flake8-bugbear
    'Q', # flake8-quotes
    'TCH', # flake8-type-checking
    'PTH', # flake8-use-pathlib
     'D', # pydocstyle
    'W', # pycodestyle (warnings)
    'E', # pycodestyle (errors)
    'N', # pep8-naming
    'PT', # flake8-pytest-style
    'PL', # pylint
    'TID', # flake8-tidy-imports
    'RUF', # ruff-specific rules
]

ignore = [
  "D105",
  "D107",
  "S112",
#  "S104",
#  "PLR2004"
#  "TC001",
#  "TC002",
#  "UP040",
]

# https://docs.astral.sh/ruff/settings/#extend-per-file-ignores
[tool.ruff.lint.extend-per-file-ignores]
'__init__.py' = [
    "D104", # missing-module-docstring
    "F401", # {name} imported but unused; consider using importlib.util.find_spec to test for availability
    "F403", # from {name} import * used; unable to detect undefined names
    "F405", # {name} may be undefined, or defined from star imports
    "TID252", # Relative imports from parent modules are banned
]

# https://docs.astral.sh/ruff/settings/#lintpylint
[tool.ruff.lint.pylint]
max-args = 12

# https://docs.astral.sh/ruff/settings/#lintflake8-tidy-imports
[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# https://docs.astral.sh/ruff/settings/#lintpydocstyle
[tool.ruff.lint.pydocstyle]
convention = 'pep257'

# https://docs.astral.sh/ruff/settings/#lintmccabe
[tool.ruff.lint.mccabe]
max-complexity = 12

# https://docs.astral.sh/ruff/settings/#lintisort
[tool.ruff.lint.isort]
section-order = [
    'future',
    'standard-library',
    'third-party',
    'first-party',
    'local-folder',
]
known-first-party = ["sliding_window"]
lines-after-imports = 2
lines-between-types = 1

[tool.mypy]  # code linter
# https://mypy.readthedocs.io/en/stable/
# https://pypi.org/project/mypy-extensions/
python_version = "3.9"
ignore_missing_imports = true
scripts_are_modules = true
allow_redefinition = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_no_return = false
show_error_context = true
show_column_numbers = true
show_error_codes = true
color_output = false
pretty = true
exclude = [
  '^setup\.py$',
  '^tmp\.py$',
  '^venv/',
  '^.venv/',
  '^test+\.py$',
  '^conftest\.py$',
  '^tmp/',
]
disable_error_code = "misc,no-redef,override,union-attr,index,assignment"

[[tool.mypy.overrides]]
module = "tests/*"
disallow_untyped_defs = false


[tool.doc8]  # RST linter
# https://github.com/PyCQA/doc8
max-line-length = 120

[tool.bandit]  # security linter
# https://github.com/PyCQA/bandit
skips = ["B324"]

#########
# TESTS #
#########

[tool.pytest.ini_options]  # pytest
# https://docs.pytest.org
# https://pypi.org/project/pytest-asyncio/
# https://pytest-cov.readthedocs.io/en/latest/
# https://pypi.org/project/pytest-pythonpath/
# https://pypi.org/project/pytest-sugar/
minversion = 7.0
asyncio_mode = "auto"
addopts = ["--ignore=tmp.py"]
norecursedirs = "data"
testpaths = "./tests"

#log_cli = false
#log_cli_level = "ERROR"
show_capture = "no"

pythonpath = ["./sliding_window", "./.venv", "./venv"]
filterwarnings = ["ignore::UserWarning", 'ignore::DeprecationWarning', "ignore::ResourceWarning"]

[tool.coverage.run]  # coverage
source = ["sliding_window"]
branch = true
omit = [
  "*/__init__.py",
  "tests/*",
  "tmp.py",
]

[tool.coverage.html]
directory = "tests/code_coverage"

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "no cov",
  "pragma: no cover",
  "if typing.TYPE_CHECKING:",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "pass",
  "raise NotImplementedError",
  "except ImportError",
  "except ModuleNotFoundError",
  "except Exception"
]

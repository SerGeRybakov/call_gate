name: test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Добавляем Poetry в PATH на Windows, если необходимо
      - name: Add Poetry to PATH on Windows
        if: runner.os == 'Windows'
        run: |
          echo "$env:USERPROFILE\.poetry\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: poetry install
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: poetry install
        shell: pwsh

      - name: Check code style and type checks (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          ssort ./call_gate
          ruff format ./call_gate
          ruff check ./call_gate --diff
          mypy ./call_gate --install-types --non-interactive --config-file pyproject.toml
        shell: bash

      - name: Check code style and type checks (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\activate
          ssort .\call_gate
          ruff format .\call_gate
          ruff check .\call_gate --diff
          mypy .\call_gate --install-types --non-interactive --config-file pyproject.toml
        shell: pwsh

      - name: Docker Compose steps (Linux only)
        if: runner.os == 'Linux'
        run: |
          docker compose version
          docker compose up -d
          # Ждём, пока Redis станет готов
          for i in {1..10}; do
            if docker exec $(docker compose ps -q redis) redis-cli ping | grep -q PONG; then
              echo "Redis is ready!"
              exit 0
            fi
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis did not start in time" && exit 1
        shell: bash

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          source .venv/bin/activate
          coverage run -m pytest --cov=call_gate
          coverage report
        shell: bash

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          .\.venv\Scripts\activate
          poetry run pytest --cov=call_gate
        shell: pwsh

      - name: Stop Docker services (Linux only)
        if: runner.os == 'Linux'
        run: docker compose down
        shell: bash
